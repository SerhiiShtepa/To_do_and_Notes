@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore;
@using To_Do_and_Notes.Data;
@using To_Do_and_Notes.Models;
@using To_Do_and_Notes.Services;
@using Microsoft.JSInterop
@using To_Do_and_Notes.Pages

@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject FolderService FolderService
@inject TaskService TaskService
@inject NoteService NoteService
@inject IJSRuntime JSRuntime
@*@inject ToDoAndNotesDbContext DbContext*@

@code {
    public enum ViewMode
    {
        ALL,
        BYFOLDER
    }
    private int? userId;
    private ViewMode viewMode;
    private bool isAddThingsDisabled;

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("ToggleButton");
            await JSRuntime.InvokeVoidAsync("initializeSummernote", DotNetObjectReference.Create(this));
        }
    }
    protected override void OnInitialized()
    {
        userId = HttpContextAccessor.HttpContext.Session.GetInt32("UserId");
        if (userId == null || userId == -1) { RedirectToPage("/Index"); }
        if (Enum.TryParse(HttpContextAccessor.HttpContext.Session.GetString("ComponentToDisplay"), out ComponentToDisplay componentToDisplay))
        {
            if (componentToDisplay != ComponentToDisplay.MAIN)
            {
                RedirectToPage("/Controller");
                RefreshPage();
            }
        }
        if (Enum.TryParse(HttpContextAccessor.HttpContext.Session.GetString("ViewMode"), out ViewMode vm))
        {
            SetViewMode(vm);
        }
        FolderService.TryToDeleteMarkedFolders();
        SetStartupFolder();
    }
    private void RedirectToPage(string pageName)
    {
        NavigationManager.NavigateTo(pageName);
    }
    private void RefreshPage()
    {
        JSRuntime.InvokeVoidAsync("location.reload");
    }
    private void SignOut()
    {
        HttpContextAccessor.HttpContext.Session.SetInt32("UserId", -1);
        HttpContextAccessor.HttpContext.Session.SetInt32("SelectedFolder", -1);
        RedirectToPage("/Index");
        RefreshPage();
    }
    private void RedirectToPersonInfo()
    {
        RedirectToPage("/PersonInfo");
        RefreshPage();
    }
    private void RedirectToBin()
    {
        HttpContextAccessor.HttpContext.Session.SetString("ComponentToDisplay", ComponentToDisplay.BIN.ToString());
        RedirectToPage("/Controller");
        RefreshPage();
    }
    private void SetViewMode(ViewMode viewMode)
    {
        this.viewMode = viewMode;
        switch (viewMode)
        {
            case ViewMode.BYFOLDER:
                isAddThingsDisabled = false;
                HttpContextAccessor.HttpContext.Session.SetString("ViewMode", ViewMode.BYFOLDER.ToString());
                break;
            case ViewMode.ALL:
                isAddThingsDisabled = true;
                HttpContextAccessor.HttpContext.Session.SetString("ViewMode", ViewMode.ALL.ToString());
                break;
        }
    }

    public Folder selectedFolder = new Folder();
    public Folder newFolder = new Folder();
    #region Folder things
    private void SetStartupFolder()
    {
        selectedFolder = FolderService.GetActiveFolderById(HttpContextAccessor.HttpContext.Session.GetInt32("SelectedFolder"));
        if (selectedFolder == null)
        {
            selectedFolder = FolderService.GetAllActiveFolders(userId).FirstOrDefault();
            if (selectedFolder == null)
            {
                selectedFolder = FolderService.CreateStartupFolder(userId);
            }
        }
    }
    private void SelectFolder(Folder folder)
    {
        SetViewMode(ViewMode.BYFOLDER);
        selectedFolder = folder;
        HttpContextAccessor.HttpContext.Session.SetInt32("SelectedFolder", Convert.ToInt32(selectedFolder.FolderId));
    }
    private void RenameFolder()
    {
        FolderService.RenameFolder(selectedFolder);
        RefreshPage();
    }
    private void CreateFolder()
    {
        FolderService.CreateFolder(newFolder, userId);
        RefreshPage();
    }
    private void MarkFolderAsDeleted()
    {
        FolderService.MarkFolderAsDeleted(selectedFolder);
        RefreshPage();
    }
    #endregion

    public Models.Task newTask = new Models.Task();
    public Models.Task selectedTask = new Models.Task();
    #region Task things
    private void CreateTask()
    {
        TaskService.CreateTask(newTask, selectedFolder.FolderId);
        RefreshPage();
    }
    private void ChangeCompleteState(Models.Task toChangeTask)
    {
        TaskService.ChangeCompleteState(toChangeTask);
    }
    private void MarkTaskAsDeleted(Models.Task taskToMark)
    {
        TaskService.MarkTaskAsDeleted(taskToMark);
        RefreshPage();
    }
    private void SelectTask(Models.Task task)
    {
        selectedTask = task;
    }
    private void EditTask()
    {
        TaskService.EditTask(selectedTask);
        RefreshPage();
    }
    #endregion

    public Note newNote = new Note();
    public Note selectedNote = new Note();
    #region Note things
    private void CreateNote()
    {
        NoteService.CreateNote(newNote, selectedFolder.FolderId);
        RefreshPage();
    }
    private void MarkNoteAsDeleted(Note noteToMark)
    {
        NoteService.MarkTaskAsDeleted(noteToMark);
        RefreshPage();
    }
    private async void SelectNote(Note note)
    {
        selectedNote = note;
        await SetSummernoteEditContent();
    }
    private void EditNote()
    {
        RedirectToPage("/Controller"); // інакше 400
        RefreshPage();
        NoteService.EditNote(selectedNote);
    }

    [JSInvokable]
    public void NewSummerNote(string content)
    {
        newNote.Content = content;
        StateHasChanged(); // Manually trigger a component state update
    }

    public async System.Threading.Tasks.Task SetSummernoteEditContent()
    {
        await JSRuntime.InvokeVoidAsync("setSummernoteEditContent", selectedNote.Content);
    }
    [JSInvokable]
    public void EditSummerNote(string content)
    {
        selectedNote.Content = content;
        //DbContext.SaveChanges();
        //StateHasChanged();  //Manually trigger a component state update
    }
    #endregion
}

<!-- sidebar -->
<div class="vertical-nav bg-white" id="sidebar">
    <div class="d-flex">
        <a href="/" class="d-flex align-items-center mb-3 ms-1 link-dark text-decoration-none fs-1">
            <i class="bi bi-journal-check me-2"></i>
            <span class="fs-3 fw-semibold">TD&N</span>
        </a>
    </div>

    <!-- static functionality -->
    <ul class="list-unstyled ps-2 mb-0">
        <li class="mb-1">
            <button class="btn btn-toggle d-inline-flex collapsed fs-4" data-bs-toggle="collapse"
                    data-bs-target="#profile-collapse" aria-expanded="false">
                <i class="bi bi-person-circle fs-2 me-2"></i>
                <div class="pt-2">Профіль</div>
            </button>
            <div class="collapse fs-4 ms-3" id="profile-collapse">
                <ul class="btn-toggle-nav list-unstyled fw-normal pb-1 small">
                    <li>
                        <button @onclick="(e => RedirectToPersonInfo())" class="btn d-inline-flex fs-5">
                            Персональні
                            дані
                        </button>
                    </li>
                    <li><button @onclick="(e => SignOut())" href="" class="btn d-inline-flex fs-5">Вийти</button></li>
                </ul>
            </div>
        </li>
        <li class="mb-1">
            <button class="btn btn-toggle d-inline-flex fs-4">
                <i class="bi bi-folder fs-2 me-2"></i>
                <div @onclick='(e => SetViewMode(ViewMode.ALL))' class="pt-1">Переглянути все</div>
            </button>
        </li>
        <li class="mb-1">
            <button @onclick="(e=> RedirectToBin())" class="btn btn-toggle d-inline-flex fs-4">
                <i class="bi bi-trash3 fs-2 me-2"></i>
                <div class="pt-1">Кошик</div>
            </button>
        </li>
    </ul>
    <!-- new folder -->
    <div class="ps-2 border-top border-bottom">
        <div class="btn btn-toggle d-inline-flex fs-4 w-100">
            <form>
                <div class="d-flex align-items-center">
                    <button type="submit" @onclick="(e => CreateFolder())" class="btn btn-link invisible-button p-0"><i class="bi bi-folder-plus fs-2 me-2"></i></button>
                    <textarea @bind="newFolder.Name" oninput="auto_grow(this)" onfocus="auto_grow(this)" type="textarea"
                              class="card-text form-control fs-4 border-0" maxlength="25" placeholder="Нова папка" required></textarea>
                </div>
            </form>
        </div>
    </div>
    <!-- folder list -->
    <div class="list-unstyled scrollable ps-2 pt-2" style="height: 60vh;">
        @foreach (Folder folder in FolderService.GetAllActiveFolders(userId))
        {
            if (folder == null) { continue; }
            <div class="d-flex w-100 fs-4 align-items-center pb-0 pt-0">
                <button @onclick="(e => SelectFolder(folder))" type="button" class="btn p-0" data-bs-toggle="dropdown" aria-expanded="false">
                    @if (selectedFolder.FolderId == folder.FolderId)
                    {
                        <i class="bi bi-folder-fill fs-2 me-2"></i>
                    }
                    else
                    {
                        <i class="bi bi-folder fs-2 me-2"></i>
                    }
                </button>
                <button @onclick="(e => SelectFolder(folder))" class="btn w-100 d-flex justify-content-start p-0 me-2 fs-4 border-0">
                    <div>@folder.Name</div>
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <button type="button" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#folderEditModal">Перейменувати</button>
                    </li>
                    <li>
                        <button @onclick="(e => MarkFolderAsDeleted())" type="button" class="dropdown-item">Видалити</button>
                    </li>
                </ul>
            </div>
        }
    </div>
</div>

<!-- Modals -->
<div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" id="folderEditModal">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="container-fluid">
                <div class="row">
                    <div class="col-11 mt-3">
                        <h5 class="modal-title text-center">Перейменування</h5>
                    </div>
                    <div class="col-1 mt-2">
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрити">
                        </button>
                    </div>
                </div>
            </div>

            <div class="modal-body">
                <div class="card p-3 ps-4">
                    <div class="row">
                        <textarea @bind="selectedFolder.Name" oninput="auto_grow(this)" onfocus="auto_grow(this)" type="textarea"
                                  class="card-text form-control fs-4 mt-1" maxlength="50"
                                  required></textarea>
                        <button @onclick="(e => RenameFolder())" type="submit" class="btn btn-primary mt-1 w-100" data-bs-dismiss="modal">Ок</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="newTaskModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="container-fluid">
                <div class="row">
                    <div class="col-11 mt-3">
                        <h5 class="modal-title text-center">Нова задача</h5>
                    </div>
                    <div class="col-1 mt-2">
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрити">
                        </button>
                    </div>
                </div>
            </div>

            <div class="modal-body">
                <form>
                    <div class="card p-3 ps-4">
                        <div class="row">
                            <div class="fs-2 col-1 mt-1">
                                <input @bind="newTask.IsCompleted" class="form-check-input" type="checkbox">
                            </div>
                            <div class="col-11">
                                <textarea @bind="newTask.Title" oninput="auto_grow(this)" type="textarea"
                                          class="card-text form-control fs-4 mt-1" placeholder="Назва ..." maxlength="50"
                                          required></textarea>
                                <textarea @bind="newTask.Description" oninput="auto_grow(this)" type="textarea"
                                          class="card-text form-control fs-5 mt-1" placeholder="Опис ..."
                                          maxlength="200"></textarea>
                                <div class="row g-1">
                                    <div class="col">
                                        <button type="button" class="btn btn-secondary mt-1 w-100"
                                                data-bs-dismiss="modal">
                                            Скасувати
                                        </button>
                                    </div>
                                    <div class="col">
                                        <button @onclick="(e => CreateTask())" type="submit" class="btn btn-primary mt-1 w-100">Ок</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="newNoteModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="container-fluid">
                <div class="row">
                    <div class="col-11 mt-3">
                        <h5 class="modal-title text-center">Нова нотатка</h5>
                    </div>
                    <div class="col-1 mt-2">
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрити">
                        </button>
                    </div>
                </div>
            </div>

            <div class="modal-body">
                <form>
                    <div class="card p-1">
                        <textarea @bind="newNote.Title" oninput="auto_grow(this)" type="textarea" class="card-text form-control fs-4 mt-1"
                                  placeholder="Назва ..." maxlength="50" required></textarea>
                        <textarea id="summernoteNew" cols="30" rows="10"></textarea>

                        <div class="row g-1">
                            <div class="col">
                                <button type="button" class="btn btn-secondary mt-1 w-100"
                                        data-bs-dismiss="modal">
                                    Скасувати
                                </button>
                            </div>
                            <div class="col">
                                <button @onclick="(e => CreateNote())" type="submit" class="btn btn-primary mt-1 w-100">Ок</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" id="taskEditModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="container-fluid">
                <div class="row">
                    <div class="col-11 mt-3">
                        <h5 class="modal-title text-center">Редагування</h5>
                    </div>
                    <div class="col-1 mt-2">
                        <button @onclick="(e => RefreshPage())" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрити">
                        </button>
                    </div>
                </div>
            </div>

            <div class="modal-body">
                <div class="card p-3 ps-4">
                    <form>
                        <div class="row">
                            <div class="fs-2 col-1 mt-1">
                                <input @bind="selectedTask.IsCompleted" class="form-check-input" type="checkbox">
                            </div>
                            <div class="col-11">
                                <textarea @bind="selectedTask.Title" oninput="auto_grow(this)" onfocus="auto_grow(this)" type="textarea"
                                          class="card-text form-control fs-4 mt-1" maxlength="50"
                                          required>task.Title</textarea>
                                <textarea @bind="selectedTask.Description" oninput="auto_grow(this)" onfocus="auto_grow(this)" type="textarea"
                                          class="card-text form-control fs-5 mt-1"
                                          maxlength="200">Lorem ipsum dolor sit amet consectetur adipisicing elit. Vel, deserunt cum in itaque totam eaque laboriosam nisi enim rerum, soluta culpa labore deleniti consectetur obcaecati saepe quaerat molestiae praesentium eum?</textarea>
                                <div class="row g-1">
                                    <div class="col">
                                        <button @onclick="(e => RefreshPage())" type="button" class="btn btn-secondary mt-1 w-100"
                                                data-bs-dismiss="modal">
                                            Скасувати
                                        </button>
                                    </div>
                                    <div class="col">
                                        <button @onclick="(e => EditTask())" type="submit" class="btn btn-primary mt-1 w-100">Ок</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" id="noteEditModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="container-fluid">
                <div class="row">
                    <div class="col-11 mt-3">
                        <h5 class="modal-title text-center">Редагування</h5>
                    </div>
                    <div class="col-1 mt-2">
                        <button @onclick="(e=>RefreshPage())" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрити">
                        </button>
                    </div>
                </div>
            </div>

            <div class="modal-body">
                <form method="post">
                    <div class="card p-1">
                        <textarea @bind="selectedNote.Title" oninput="auto_grow(this)" onfocus="auto_grow(this)" type="textarea"
                                  class="card-text form-control fs-4 mt-1" maxlength="50" required>note.Title</textarea>

                        <textarea name="summernoteEdit" id="summernoteEdit" cols="30" rows="10"></textarea>

                        <div class="row g-1">
                            <div class="col">
                                <button @onclick="(e=>RefreshPage())" type="button" class="btn btn-secondary mt-1 w-100"
                                        data-bs-dismiss="modal">
                                    Скасувати
                                </button>
                            </div>
                            <div class="col">
                                <button @onclick="(e=> EditNote())" type="submit" class="btn btn-primary mt-1 w-100">Ок</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Main part of page -->
<main role="main">

    <div class="page-content" id="content">
        <!-- Button list -->
        <div class="d-flex justify-content-start ps-2 pt-2">
            <button id="sidebarCollapse" class="btn btn-secondary align-self-baseline">
                <i class="bi bi-backspace"></i>
            </button>
            <div class="container mobileDataHide">
                <div class="row">
                    <div class="col-6">
                        <button disabled="@isAddThingsDisabled" class="btn btn-primary fs-5" data-bs-toggle="modal" data-bs-target="#newTaskModal">
                            +
                            Задача
                        </button>
                        @*<input class="form-check-input fs-2" type="checkbox" id="tasksCheckbox" value="option2" checked>*@
                    </div>
                    <div class="col-6">
                        <button disabled="@isAddThingsDisabled" class="btn btn-primary fs-5" data-bs-toggle="modal" data-bs-target="#newNoteModal">
                            +
                            Нотатка
                        </button>
                        @*<input class="form-check-input fs-2" type="checkbox" id="notesCheckbox" value="option2" checked>*@
                    </div>
                </div>
            </div>
        </div>

        <!-- Content -->
        <div class="container mobileDataHide">
            <!-- Default data view -->
            <div class="row">
                <div class="col-lg-6  mt-2 border-end">
                    <div class="card-group scrollable pe-2">
                        <div class="row row-cols-1 ms-0 w-100" style="height: fit-content;">
                            @if (viewMode == ViewMode.BYFOLDER)
                            {
                                foreach (Models.Task task in TaskService.GetAllActiveTasks(selectedFolder.FolderId))
                                {
                                    if (task == null) { continue; }
                                    <div class="card mt-2 me-2">
                                        <div class="container-fluid card-body ps-3">
                                            <div class="row">
                                                <input @bind="task.IsCompleted" @oninput="(e => ChangeCompleteState(task))" class="form-check-input fs-2 col-1" type="checkbox">
                                                <div class="col-9">
                                                    <h5 @onclick="(e => SelectTask(task))" class="card-title mt-1" data-bs-toggle="modal" data-bs-target="#taskEditModal">
                                                        @task.Title
                                                    </h5>
                                                    <p class="card-text">
                                                        @task.Description
                                                    </p>
                                                </div>
                                                <div class="col-2 row align-items-top mt-3">
                                                    <a @onclick="(e => MarkTaskAsDeleted(task))" href="" class="link-danger"><i class="bi bi-trash3 fs-4"></i></a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else if (viewMode == ViewMode.ALL)
                            {
                                foreach (Models.Task task in TaskService.GetAllActiveTasks())
                                {
                                    if (task == null) { continue; }
                                    <div class="card mt-2 me-2">
                                        <div class="container-fluid card-body ps-3">
                                            <div class="row">
                                                <input @bind="task.IsCompleted" @oninput="(e => ChangeCompleteState(task))" class="form-check-input fs-2 col-1" type="checkbox">
                                                <div class="col-9">
                                                    <h5 @onclick="(e => SelectTask(task))" class="card-title mt-1" data-bs-toggle="modal" data-bs-target="#taskEditModal">
                                                        @task.Title
                                                    </h5>
                                                    <p class="card-text">
                                                        @task.Description
                                                    </p>
                                                </div>
                                                <div class="col-2 row align-items-top mt-3">
                                                    <a @onclick="(e => MarkTaskAsDeleted(task))" href="" class="link-danger"><i class="bi bi-trash3 fs-4"></i></a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
                <div class="col-lg-6  mt-2">
                    <div class="card-group scrollable">
                        <div class="row row-cols-2 g-2 mt-0 me-1 w-100" style="height: fit-content;">
                            @if (viewMode == ViewMode.BYFOLDER)
                            {
                                foreach (Note note in NoteService.GetAllActiveNotes(selectedFolder.FolderId))
                                {
                                    if (note == null) { continue; }

                                    <div class="col">
                                        <div class="card">
                                            <div class="card-body">
                                                <div class="row">
                                                    <h5 @onclick="(e => SelectNote(note))" class="card-title col-9" data-bs-toggle="modal" data-bs-target="#noteEditModal">
                                                        @note.Title
                                                    </h5>
                                                    <a @onclick="(e => MarkNoteAsDeleted(note))" href="" class="col-3 link-danger"><i class="bi bi-trash3 fs-4"></i></a>
                                                </div>
                                                <p class="card-text">
                                                    @note.Content
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else if (viewMode == ViewMode.ALL)
                            {
                                foreach (Note note in NoteService.GetAllActiveNotes())
                                {
                                    if (note == null) { continue; }

                                    <div class="col">
                                        <div class="card">
                                            <div class="card-body">
                                                <div class="row">
                                                    <h5 @onclick="(e => SelectNote(note))" class="card-title col-9" data-bs-toggle="modal" data-bs-target="#noteEditModal">
                                                        @note.Title
                                                    </h5>
                                                    <a @onclick="(e => MarkNoteAsDeleted(note))" href="" class="col-3 link-danger"><i class="bi bi-trash3 fs-4"></i></a>
                                                </div>
                                                <p class="card-text">
                                                    @note.Content
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
            <!-- Mobile data view -->
            @*<div class="row mobileDataHide">
                <div class="col-12 d-lg-none scrollable card-group">
                    @if (viewMode == ViewMode.BYFOLDER)
                    {
                        foreach (Models.Task task in TaskService.GetAllActiveTasks(selectedFolder.FolderId))
                        {
                            if (task == null) { continue; }
                            <div class="card mt-2 me-2">
                                <div class="container-fluid card-body p-2 ps-3">
                                    <div class="row">
                                        <input @bind="task.IsCompleted" @oninput="(e => ChangeCompleteState(task))" class="form-check-input fs-2 col-1" type="checkbox">
                                        <div class="col-10">
                                            <h5 @onclick="(e => SelectTask(task))" class="card-title mt-1" data-bs-toggle="modal" data-bs-target="#taskEditModal">
                                                @task.Title
                                            </h5>
                                            <p class="card-text">
                                                @task.Description
                                            </p>
                                        </div>
                                        <div class="col-1 row align-items-top mt-3">
                                            <a @onclick="(e => MarkTaskAsDeleted(task))" href="" class="link-danger"><i class="bi bi-trash3 fs-4"></i></a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        foreach (Note note in NoteService.GetAllActiveNotes(selectedFolder.FolderId))
                        {
                            if (note == null) { continue; }

                            <div class="col">
                                <div class="card">
                                    <div class="card-body">
                                        <div class="row">
                                            <h5 @onclick="(e => SelectNote(note))" class="card-title col-9" data-bs-toggle="modal" data-bs-target="#noteEditModal">
                                                @note.Title
                                            </h5>
                                            <a @onclick="(e => MarkNoteAsDeleted(note))" href="" class="col-3 link-danger"><i class="bi bi-trash3 fs-4"></i></a>
                                        </div>
                                        <p class="card-text">
                                            @note.Content
                                        </p>
                                    </div>
                                </div>
                            </div>
                        }

                    }
                    else if (viewMode == ViewMode.ALL)
                    {
                        foreach (Models.Task task in TaskService.GetAllActiveTasks())
                        {
                            if (task == null) { continue; }
                            <div class="card mt-2 me-2">
                                <div class="container-fluid card-body p-2 ps-3">
                                    <div class="row">
                                        <input @bind="task.IsCompleted" @oninput="(e => ChangeCompleteState(task))" class="form-check-input fs-2 col-1" type="checkbox">
                                        <div class="col-10">
                                            <h5 @onclick="(e => SelectTask(task))" class="card-title mt-1" data-bs-toggle="modal" data-bs-target="#taskEditModal">
                                                @task.Title
                                            </h5>
                                            <p class="card-text">
                                                @task.Description
                                            </p>
                                        </div>
                                        <div class="col-1 row align-items-top mt-3">
                                            <a @onclick="(e => MarkTaskAsDeleted(task))" href="" class="link-danger"><i class="bi bi-trash3 fs-4"></i></a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        foreach (Note note in NoteService.GetAllActiveNotes())
                        {
                            if (note == null) { continue; }

                            <div class="col">
                                <div class="card">
                                    <div class="card-body">
                                        <div class="row">
                                            <h5 @onclick="(e => SelectNote(note))" class="card-title col-9" data-bs-toggle="modal" data-bs-target="#noteEditModal">
                                                @note.Title
                                            </h5>
                                            <a @onclick="(e => MarkNoteAsDeleted(note))" href="" class="col-3 link-danger"><i class="bi bi-trash3 fs-4"></i></a>
                                        </div>
                                        <p class="card-text">
                                            @note.Content
                                        </p>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>*@
        </div>

    </div>
</main>

